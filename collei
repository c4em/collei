#!/usr/bin/python3

import os
import requests
import json
import asyncio
import sys
import time
from random import randrange

import genshin
from bs4 import BeautifulSoup

# TODO: Add some more sites to scrape for codes. The fandom wiki works reliably,
# unlike some other sites but is on the rather slow side when it comes to adding the new codes.

def errprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)

def extract_active_genshin_codes(soup):
    codes = []
    for tr in soup.find("table").findAll("tr"):
        for td in tr.findAll("td"):
            code = str(td.find("code"))
            if code != "None":
                codes.append(code[code.find('>')+1 : code.find('</')])
            elif "Expired:" in str(td):
                return codes
def extract_active_starrail_codes(soup):
    codes = []
    for tr in soup.find("table").findAll("tr"):
        code = str(tr.find("td"))
        if code != "None":
            codes.append(code[code.find(">")+1 : code.find("\n</")])
    return codes

async def claim_daily(client):
    try:
        await client.claim_daily_reward()
    except genshin.AlreadyClaimed:
        errprint("Daily check-in rewards have already been claimed.")
    except Exception as e:
        errprint(f"Could not claim daily rewards: \"{e}\"")
        return False

def get_codes_from_file(file):
    if not os.path.exists(file):
        os.mknod(file)
    with open(file, "r") as file:
        return file.readlines()

async def redeem_codes(codes, file_codes, client):
    new_codes = file_codes
    for code in codes:
        if code+"\n" not in file_codes:
            print(f"Redeeming code: {code}")
            try:
                await client.redeem_code(code)
            except Exception as e:
                print(f"Could not redeem code {code}: '{e}'")
            finally:
                new_codes.append(code)
            time.sleep(6+randrange(2))
    return new_codes

def save_codes(codes, file):
    with open(file, "w") as file:
        for code in codes:
            if code[-1] == "\n":
                file.write("".join(code))
            else:
                file.write("".join(code) + "\n")

async def redeem_genshin():
    time.sleep(randrange(5))
    client = genshin.Client(os.environ.get("GENSHIN_COOKIES"), debug=False, game=genshin.Game.GENSHIN)

    print("Claiming daily check-in rewards for Genshin Impact")
    if await claim_daily(client) == False:
        return False
    
    res = requests.get("https://genshin-impact.fandom.com/wiki/Promotional_Code")
    soup = BeautifulSoup(res.text, "html.parser")
    active_codes = extract_active_genshin_codes(soup)

    file_codes = get_codes_from_file("genshin_codes.txt")
    new_codes = await redeem_codes(active_codes, file_codes, client)

    save_codes(file_codes, "genshin_codes.txt")

async def redeem_starrail():
    time.sleep(randrange(5))
    client = genshin.Client(os.environ.get("STARRAIL_COOKIES"), debug=False, game=genshin.Game.STARRAIL)

    print("Claiming daily check-in rewards for Honkai Star Rail")
    if await claim_daily(client) == False:
        return False

    res = requests.get("https://honkai-star-rail.fandom.com/wiki/Redemption_Code")
    soup = BeautifulSoup(res.text, "html.parser")
    active_codes = extract_active_starrail_codes(soup)

    file_codes = get_codes_from_file("starrail_codes.txt")
    new_codes = await redeem_codes(active_codes, file_codes, client)

    save_codes(new_codes, "starrail_codes.txt")

async def main():
    if os.environ.get("GENSHIN_COOKIES") is None and os.environ.get("STARRAIL_COOKIES") is None:
        errprint("COOKIES secrets are not set. Please read the setup section in README.md to proceed.")
        exit(1)

    did_fail=False
    if os.environ.get("GENSHIN_COOKIES") is not None:
        if await redeem_genshin() == False:
            errprint("Failed at claiming Genshin Impact rewards")
            did_fail=True

    if os.environ.get("STARRAIL_COOKIES") is not None:
        if await redeem_starrail() == False:
            errprint("Failed at claiming Honkai Star Rail rewards")
            did_fail=True

    if did_fail == True:
        exit(1)

if __name__ == '__main__':
    asyncio.run(main())

